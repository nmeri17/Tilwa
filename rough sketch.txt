flesh out auth controller actions. Implement loginAs

install transphpform and turbo

->createQueryBuilder()

->select('u')->from(User::class, 'u')

->where('u.email = ?1')->setParameter(1, $reqData['email']) // this should go in "good to know"

route caching
	- all the routes should pass through regexForm and get saved with the result under a trie the way they were defined. The aim is to skip this replacement phase during runtime
	- only needed if you're using a lot of dynamic routes

try to deploy on azure

When you find a way of identifying orm models, revisit NoSqlLogic->setup

when cacheManager is integrated:
	- refactor its usage wherever it appears in respect to accessing nested objects; tags etc
	- is the override pattern we're using good or can it be updated while in the cache?

#
work needed on updateReactor

what container is used to hydrate handler method on the queued job?

on flow hit, upload the rest into the shared space for all users insted of simply discarding it

AssignListeners::class

we need a cli command for copying laravel config/migrations files from the library locations to dev land i.e. so config can lift the files (from the hard-coded "config" folder)


##controllers and services

Bar:
	- app level service entry into repositories
	- orm in services
Extract rejection logic into a class and inject that into both service wrapper and executable classes. then implement an interface that informs these parents to run x whenever such interface is met
	prefersServices, servicePreferenceManager

Revisit NoSqlLogic for implementing the factory pattern

Remember to plug in new login request handling in module assembly

Request for auth route comes in:
	- (A) depending on the authentication type (jwt/session/custom [meaning, an interface]), user id is retrieved
	- (B) this id is forwarded to a reliable person accessible to controllers/request/container who are interested in retrieving auth user
	- in the background, he receives a concrete orm from any container available and can hydrate a user out of the id he was given
	- he is also overwritable in case dev wants a custom way of user hydration
	- he's the one responseManager interfaces with and decides a user is unauthenticated when his id is missing

Controller action methods can then accept auth user objects

Bonus: add auth services (email verification, password recovery) dev can inject in their controllers

			/*if ($manager->requiresAuth()) // this typically goes in responseMager->trigger()

				if ($this->authenticator->verifyUser())
					// ...etc etc
			*/